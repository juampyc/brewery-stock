/** Google Apps Script backend v3.2 (patch) */
const SHEETS={brands:'brands',containers:'containers',styles:'styles',labels:'labels',emptycans:'emptycans',movements:'movements'};
const TIMEZONE="America/Argentina/Buenos_Aires";
function _ss(){return SpreadsheetApp.openById("1eML8y0shrdheQ3bISwV3bnimsAVDruR1x1JFUKNWcog");}
function _sheet(n){const ss=_ss();return ss.getSheetByName(n)||ss.insertSheet(n);}
function _uuid(){return Utilities.getUuid();}
function _now(){return new Date();}
function _json(o){const t=ContentService.createTextOutput(JSON.stringify(o));t.setMimeType(ContentService.MimeType.JSON);return t;}

function doGet(e){try{const ent=(e.parameter.entity||'').toLowerCase();let r;switch(ent){case'styles':r=getStyles();break;case'brands':r=getBrands();break;case'containers':r=getContainers();break;case'labels':r=getLabels();break;case'emptycans':r=getEmptyCans();break;case'cans':r=getCansAgg();break;case'movements':r=getMovements();break;default:r={error:`Entidad desconocida: ${ent}`};}return _json(r);}catch(err){return _json({error:String(err)},500);}}
function doPost(e){try{const ent=(e.parameter.entity||'').toLowerCase();const act=(e.parameter.action||'').toLowerCase();const body=e.postData?.contents?JSON.parse(e.postData.contents):{};let r;if(ent==='setup'&&act==='init'){r=initSheets();return _json({ok:true,result:r});}switch(ent){case'brands':r=brandsCrud(body,act);break;case'containers':r=crudGeneric(SHEETS.containers,body,act);break;case'styles':r=crudGeneric(SHEETS.styles,body,act);break;case'labels':r=labelsCrud(body,act);break;case'production':r=(act==='produce')?productionProduce(body):{error:`Acción desconocida: ${act}`};break;case'cans':r=(act==='transition_state')?cansTransition(body):(act==='finalize')?cansFinalize(body):{error:`Acción desconocida: ${act}`};break;case'emptycans':r=emptyCansCrud(body,act);break;default:r={error:`Entidad desconocida: ${ent}`};}if(r&&r.error)return _json(r,400);return _json({ok:true,result:r});}catch(err){return _json({error:String(err)},500);}}

function initSheets(){const b=_sheet(SHEETS.brands);b.clear();b.getRange(1,1,1,5).setValues([['id','name','color','createdAt','updatedAt']]);
const c=_sheet(SHEETS.containers);c.clear();c.getRange(1,1,1,6).setValues([['id','name','sizeLiters','type','color','updatedAt']]);
const s=_sheet(SHEETS.styles);s.clear();s.getRange(1,1,1,7).setValues([['id','brandId','name','color','showAlways','createdAt','updatedAt']]);
const l=_sheet(SHEETS.labels);l.clear();l.getRange(1,1,1,10).setValues([['id','brandId','styleId','name','isCustom','qty','provider','lot','dateTime','lastModified']]);
const e=_sheet(SHEETS.emptycans);e.clear();e.getRange(1,1,1,6).setValues([['id','qty','provider','lot','dateTime','lastModified']]);
const m=_sheet(SHEETS.movements);m.clear();m.getRange(1,1,1,8).setValues([['id','dateTime','entity','type','qty','description','refIds','lastModified']]);return true;}

function getSheetRows(n){const sh=_sheet(n);const rg=sh.getDataRange().getValues();const head=rg.shift();return rg.filter(r=>r[0]).map(r=>Object.fromEntries(head.map((h,i)=>[h,r[i]])));}
function getBrands(){return getSheetRows(SHEETS.brands);}
function getContainers(){return getSheetRows(SHEETS.containers);}
function getStyles(){const brands=getBrands();const map={};brands.forEach(b=>map[String(b.id)]=b);return getSheetRows(SHEETS.styles).map(s=>({...s,showAlways:String(s.showAlways)==='true',brandName:map[String(s.brandId)]?.name||''}));}
function getLabels(){return getSheetRows(SHEETS.labels);}
function getMovements(){return getSheetRows(SHEETS.movements);}
function getEmptyCans(){return getSheetRows(SHEETS.emptycans);}

function getCansAgg(){const rows=getMovements().filter(m=>String(m.entity)==='cans');const sums={};rows.forEach(m=>{const q=Number(m.qty||0);const d=String(m.description||'');const styleId=d.match(/styleId=([0-9a-f\-]+)/i)?.[1]||'';const state=d.match(/state=([a-z_]+)/i)?.[1]||'';const from=d.match(/from=([a-z_]+)/i)?.[1]||'';const to=d.match(/to=([a-z_]+)/i)?.[1]||'';if(m.type==='add'){const k=`${styleId}|${state}`;sums[k]=(sums[k]||0)+q;}else if(m.type==='transition'){if(from){const kf=`${styleId}|${from}`;sums[kf]=(sums[kf]||0)-q;}if(to){const kt=`${styleId}|${to}`;sums[kt]=(sums[kt]||0)+q;}}});const out=[];Object.entries(sums).forEach(([k,v])=>{const[styleId,state]=k.split('|');if(v!==0)out.push({styleId,state,qty:v});});return out;}

function brandsCrud(body,action){
  if(action==='delete'){
    const brandId=String(body.id||'');
    const styles=getStyles();
    const hasStyles = styles.some(s=>String(s.brandId)===brandId);
    if(hasStyles) return {error:'No se puede eliminar la marca: tiene estilos cargados.'};
    const labels=getLabels();
    const styleIds=new Set(styles.filter(s=>String(s.brandId)===brandId).map(s=>String(s.id)));
    const hasLabels=labels.some(l=>String(l.brandId)===brandId||styleIds.has(String(l.styleId)));
    if(hasLabels) return {error:'No se puede eliminar la marca: tiene etiquetas asociadas.'};
    return crudGeneric(SHEETS.brands,body,action);
  }
  return crudGeneric(SHEETS.brands,body,action);
}

function crudGeneric(sheetName,body,action){
  const sh=_sheet(sheetName);
  const now=_now();
  if(action==='create'){
    const id=_uuid();let payload;
    if(sheetName===SHEETS.brands){payload=[id,body.name||'',body.color||'#000000',now,now];}
    else if(sheetName===SHEETS.containers){payload=[id,body.name||'',Number(body.sizeLiters||0),body.type||'lata',body.color||'#000000',now];}
    else if(sheetName===SHEETS.styles){payload=[id,String(body.brandId||''),body.name||'',body.color||'#000000',Boolean(body.showAlways),now,now];}
    else{return{error:'create no soportada'}}
    sh.appendRow(payload);return{id};
  }else if(action==='update'){
    const id=String(body.id);
    const rg=sh.getDataRange().getValues();
    for(let i=1;i<rg.length;i++){
      if(String(rg[i][0])===id){
        if(sheetName===SHEETS.brands){rg[i][1]=body.name||rg[i][1];rg[i][2]=body.color||rg[i][2];rg[i][4]=now;}
        else if(sheetName===SHEETS.containers){rg[i][1]=body.name||rg[i][1];rg[i][2]=Number(body.sizeLiters||rg[i][2]);rg[i][3]=body.type||rg[i][3];rg[i][4]=body.color||rg[i][4];rg[i][5]=now;}
        else if(sheetName===SHEETS.styles){rg[i][1]=String(body.brandId||rg[i][1]);rg[i][2]=body.name||rg[i][2];rg[i][3]=body.color||rg[i][3];rg[i][4]=Boolean(body.showAlways);rg[i][6]=now;}
        sh.getRange(1,1,rg.length,rg[0].length).setValues(rg);return{id};
      }
    }
    return{error:'No encontrado'};
  }else if(action==='delete'){
    const id=String(body.id);
    if(sheetName===SHEETS.styles){
      if(stylesCrudGuardDelete(id)) return {error:'No se puede eliminar el estilo: tiene registros de producción.'};
    }
    const rg=sh.getDataRange().getValues();
    for(let i=1;i<rg.length;i++){
      if(String(rg[i][0])===id){
        sh.deleteRow(i+1);
        return{ok:true};
      }
    }
    return{error:'No encontrado'};
  }else{
    return{error:`Acción no soportada: ${action}`};
  }
}

function labelsCrud(body,action){
  const sh=_sheet(SHEETS.labels);const now=_now();
  if(action==='create'){
    const isCustom=Boolean(body.isCustom);
    if(!isCustom&&(!body.brandId||!body.styleId))return{error:'Marca y Estilo son obligatorios salvo etiquetas personalizadas.'};
    const id=_uuid();
    const row=[id,String(body.brandId||''),String(body.styleId||''),body.name||'',isCustom,Number(body.qty||0),body.provider||'',body.lot||'',body.dateTime||now,now];
    sh.appendRow(row);
    appendMovement({entity:'labels',type:'add',qty:Number(body.qty||0),description:`labelId=${id};styleId=${body.styleId||''};isCustom=${isCustom}`});
    return{id};
  }else if(action==='update'){
    const id=String(body.id);
    const isCustom=Boolean(body.isCustom);
    if(!isCustom&&(!body.brandId||!body.styleId))return{error:'Marca y Estilo son obligatorios salvo etiquetas personalizadas.'};
    const rg=sh.getDataRange().getValues();const head=rg[0];const idx=Object.fromEntries(head.map((h,i)=>[h,i]));
    for(let i=1;i<rg.length;i++){
      if(String(rg[i][0])===id){
        const oldQty=Number(rg[i][idx.qty]||0);
        const newQty=Number(body.qty ?? oldQty);
        rg[i][idx.brandId]=String(body.brandId||rg[i][idx.brandId]);
        rg[i][idx.styleId]=String(body.styleId||rg[i][idx.styleId]);
        rg[i][idx.name]=body.name||rg[i][idx.name];
        rg[i][idx.isCustom]=isCustom;
        rg[i][idx.qty]=newQty;
        rg[i][idx.provider]=body.provider||rg[i][idx.provider];
        rg[i][idx.lot]=body.lot||rg[i][idx.lot];
        rg[i][idx.dateTime]=body.dateTime||rg[i][idx.dateTime];
        rg[i][idx.lastModified]=now;
        sh.getRange(1,1,rg.length,rg[0].length).setValues(rg);
        if(newQty!==oldQty){_updateMovementQty('labels','add',`labelId=${id}`,newQty);}
        return{id};
      }
    }
    return{error:"Etiqueta no encontrada"};
  }else if(action==='delete'){
    const id=String(body.id);
    if(_labelConsumed(id)) return {error:'No se puede eliminar: lote de etiquetas ya fue consumido.'};
    const rg=sh.getDataRange().getValues();
    for(let i=1;i<rg.length;i++){
      if(String(rg[i][0])===id){
        sh.deleteRow(i+1);
        appendMovement({entity:'labels',type:'delete',qty:0,description:`labelId=${id}`});
        return{ok:true};
      }
    }
    return{error:'No encontrada'};
  }else{
    return{error:`Acción no soportada: ${action}`};
  }
}

function emptyCansCrud(body,action){
  const sh=_sheet(SHEETS.emptycans);const now=_now();
  if(action==='add'){
    const id=_uuid();const qty=Number(body.qty||0);if(!qty||qty<=0)return{error:'qty inválida'};
    const row=[id,qty,body.provider||'',body.lot||'',body.dateTime||now,now];sh.appendRow(row);
    appendMovement({entity:'emptycans',type:'add',qty:qty,description:`emptyId=${id};provider=${body.provider||''};lot=${body.lot||''}`,dateTime:body.dateTime||now});
    return{id};
  }
  if(action==='update'){
    const id=String(body.id||'');const qty=Number(body.qty||0);
    const rg=sh.getDataRange().getValues();const head=rg[0];const idx=Object.fromEntries(head.map((h,i)=>[h,i]));
    for(let i=1;i<rg.length;i++){
      if(String(rg[i][idx.id])===id){
        rg[i][idx.qty]=qty>0?qty:rg[i][idx.qty];
        rg[i][idx.provider]=body.provider??rg[i][idx.provider];
        rg[i][idx.lot]=body.lot??rg[i][idx.lot];
        rg[i][idx.dateTime]=body.dateTime||rg[i][idx.dateTime];
        rg[i][idx.lastModified]=now;
        sh.getRange(1,1,rg.length,rg[0].length).setValues(rg);
        _updateMovementQty('emptycans','add',`emptyId=${id}`,qty>0?qty:rg[i][idx.qty]);
        _updateMovementDescByRef('emptycans','add',`emptyId=${id}`,`emptyId=${id};provider=${rg[i][idx.provider]||''};lot=${rg[i][idx.lot]||''}`);
        return{id};
      }
    }
    return{error:'Registro de latas no encontrado'};
  }
  if(action==='delete'){
    const id=String(body.id||'');
    if(_emptyLotConsumed(id)) return {error:'No se puede eliminar: el lote de latas ya fue consumido total o parcialmente.'};
    const rg=sh.getDataRange().getValues();const head=rg[0];const idx=Object.fromEntries(head.map((h,i)=>[h,i]));
    for(let i=1;i<rg.length;i++){
      if(String(rg[i][idx.id])===id){
        sh.deleteRow(i+1);
        appendMovement({entity:'emptycans',type:'delete',qty:0,description:`emptyId=${id}`});
        return{ok:true};
      }
    }
    return{error:'Registro de latas no encontrado'};
  }
  return {error:`Acción no soportada: ${action}`};
}

function _updateMovementQty(entity,type,refSnippet,newQty){const sh=_sheet(SHEETS.movements);const rg=sh.getDataRange().getValues();const head=rg[0];const idx=Object.fromEntries(head.map((h,i)=>[h,i]));for(let i=1;i<rg.length;i++){const row=rg[i];if(String(row[idx.entity])===entity&&String(row[idx.type])===type&&String(row[idx.description]||'').indexOf(refSnippet)>-1){rg[i][idx.qty]=Number(newQty||0);rg[i][idx.lastModified]=_now();sh.getRange(1,1,rg.length,rg[0].length).setValues(rg);return true;}}return false;}
function _updateMovementDescByRef(entity,type,refSnippet,newDesc){const sh=_sheet(SHEETS.movements);const rg=sh.getDataRange().getValues();const head=rg[0];const idx=Object.fromEntries(head.map((h,i)=>[h,i]));for(let i=1;i<rg.length;i++){const row=rg[i];if(String(row[idx.entity])===entity&&String(row[idx.type])===type&&String(row[idx.description]||'').indexOf(refSnippet)>-1){rg[i][idx.description]=newDesc;rg[i][idx.lastModified]=_now();sh.getRange(1,1,rg.length,rg[0].length).setValues(rg);return true;}}return false;}

function _parseUsedList(desc){const m=String(desc||'').match(/used:\s*([0-9a-f\-:,]+)/i);if(!m)return[];return m[1].split(',').map(s=>{const[a,q]=s.split(':');return{id:String(a||''),qty:Number(q||0)};});}
function _sumConsumedForEmptyId(emptyId){const movs=getMovements().filter(m=>String(m.entity)==='emptycans'&&String(m.type)==='consume');let total=0;movs.forEach(m=>{_parseUsedList(m.description).forEach(u=>{if(String(u.id)===String(emptyId))total+=Number(u.qty||0);});});return total;}
function _getEmptyLotsFIFO(){const rows=getEmptyCans();const lots=rows.filter(r=>Number(r.qty||0)>0).map(r=>{const consumed=_sumConsumedForEmptyId(r.id);const available=Number(r.qty||0)-consumed;return {...r,available};}).filter(r=>r.available>0).sort((a,b)=>new Date(a.dateTime)-new Date(b.dateTime));return lots;}
function consumeEmptyCansFIFO(qty,dt,styleId){let remaining=Number(qty||0);const lots=_getEmptyLotsFIFO();const used=[];for(let i=0;i<lots.length&&remaining>0;i++){const take=Math.min(lots[i].available,remaining);if(take>0){used.push(`${lots[i].id}:${take}`);remaining-=take;}}if(remaining>0){throw new Error('No hay latas vacías suficientes');}appendMovement({entity:'emptycans',type:'consume',qty:qty,description:`used:${used.join(',')};styleId=${styleId}`,dateTime:dt});}
function _labelConsumed(labelId){const movs=getMovements().filter(m=>String(m.entity)==='labels'&&String(m.type)==='consume');for(const m of movs){const used=_parseUsedList(m.description);if(used.some(u=>String(u.id)===String(labelId)&&Number(u.qty||0)>0))return true;}return false;}
function _emptyLotConsumed(emptyId){return _sumConsumedForEmptyId(emptyId)>0;}

function productionProduce(body){const qty=Number(body.qty||0),dt=body.dateTime||_now(),styleId=String(body.styleId||''),pasteurized=Boolean(body.pasteurized),labeled=Boolean(body.labeled),labelId=body.labelId||null;if(!styleId)return{error:'styleId requerido'};if(!qty||qty<=0)return{error:'qty inválida'};consumeEmptyCansFIFO(qty,dt,styleId);const state=(labeled&&pasteurized)?'final':(labeled?'sin_pasteurizar_etiquetada':(pasteurized?'pasteurizada_sin_etiquetar':'sin_pasteurizar_sin_etiquetar'));appendMovement({entity:'cans',type:'add',qty:qty,description:`styleId=${styleId};state=${state}`,dateTime:dt});if(labeled){consumeLabelsFIFO(styleId,qty,labelId,dt);}return{ok:true};}
function consumeLabelsFIFO(styleId,qty,labelId,dt){const sh=_sheet(SHEETS.labels);const rg=sh.getDataRange().getValues();const head=rg.shift();const idx=Object.fromEntries(head.map((h,i)=>[h,i]));let remaining=qty;let used=[];for(let i=0;i<rg.length&&remaining>0;i++){const row=rg[i];const thisId=String(row[idx.id]);const thisStyle=String(row[idx.styleId]);let canUse=false;if(labelId)canUse=(thisId===String(labelId));else canUse=(thisStyle===String(styleId)&&!Boolean(row[idx.isCustom]));if(!canUse)continue;const avail=Number(row[idx.qty]||0);if(avail<=0)continue;const take=Math.min(avail,remaining);row[idx.qty]=avail-take;used.push(`${thisId}:${take}`);remaining-=take;}if(rg.length>0)_sheet(SHEETS.labels).getRange(2,1,rg.length,rg[0].length).setValues(rg);appendMovement({entity:'labels',type:'consume',qty:qty,description:`used:${used.join(',')};styleId=${styleId}`,dateTime:dt});}
function cansTransition(body){const qty=Number(body.qty||0),dt=body.dateTime||_now(),styleId=String(body.styleId||''),toState=String(body.toState||''),consumeLabels=Boolean(body.consumeLabels),labelId=body.labelId||null;if(!styleId)return{error:'styleId requerido'};if(!toState)return{error:'toState requerido'};if(!qty||qty<=0)return{error:'qty inválida'};appendMovement({entity:'cans',type:'transition',qty:qty,description:`styleId=${styleId};from=;to=${toState}`,dateTime:dt});if(consumeLabels&&/etiquetad/i.test(toState)){consumeLabelsFIFO(styleId,qty,labelId,dt);}return{ok:true};}
function cansFinalize(body){const styleId=String(body.styleId||''), dt=body.dateTime||_now();const pse=Number(body.from_pasteurizada_sin_etiquetar||0);const spe=Number(body.from_sin_pasteurizar_etiquetada||0);const sps=Number(body.from_sin_pasteurizar_sin_etiquetar||0);if(!styleId) return {error:'styleId requerido'};if(pse+spe+sps<=0) return {error:'Nada para finalizar'};if(pse>0) appendMovement({entity:'cans',type:'transition',qty:pse,description:`styleId=${styleId};from=pasteurizada_sin_etiquetar;to=final`,dateTime:dt});if(spe>0) appendMovement({entity:'cans',type:'transition',qty:spe,description:`styleId=${styleId};from=sin_pasteurizar_etiquetada;to=final`,dateTime:dt});if(sps>0) appendMovement({entity:'cans',type:'transition',qty:sps,description:`styleId=${styleId};from=sin_pasteurizar_sin_etiquetar;to=final`,dateTime:dt});const consumeLabels = Boolean(body.consumeLabels);if(consumeLabels){const qtyToLabel = Number(pse+sps);if(qtyToLabel>0){const labelId = body.labelId||null;consumeLabelsFIFO(styleId, qtyToLabel, labelId, dt);}}return {ok:true};}

function appendMovement({entity,type,qty,description,dateTime}){const sh=_sheet(SHEETS.movements);sh.appendRow([_uuid(),dateTime||_now(),entity,type,Number(qty||0),description||'', '', _now()]);}